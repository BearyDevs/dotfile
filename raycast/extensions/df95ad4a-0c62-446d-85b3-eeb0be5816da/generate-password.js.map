{
  "version": 3,
  "sources": ["../src/generate-password.tsx", "../src/helpers/helpers.ts"],
  "sourcesContent": ["import {\n  Action,\n  ActionPanel,\n  Clipboard,\n  Form,\n  PopToRootType,\n  Toast,\n  getPreferenceValues,\n  showHUD,\n  showToast,\n} from \"@raycast/api\";\n\nimport { generatePassword } from \"@/helpers/helpers\";\n\ninterface Preferences {\n  hideAfterCopy: boolean;\n  storePasswordLength: boolean;\n}\n\ninterface Form {\n  length: string;\n  useNumbers: 1 | 0;\n  useChars: 1 | 0;\n}\n\nconst handleGeneratePassword = (values: Form) => {\n  const { hideAfterCopy } = getPreferenceValues<Preferences>();\n\n  const length = values.length;\n  const lengthNumber = parseInt(length, 10);\n\n  const useNumbers = Boolean(values.useNumbers);\n  const useChars = Boolean(values.useChars);\n\n  if (!Number.isFinite(lengthNumber)) {\n    showToast(Toast.Style.Failure, \"Password length must be a number\");\n    return;\n  }\n\n  if (lengthNumber < 5) {\n    showToast(Toast.Style.Failure, \"Password length must be greater than 4\");\n    return;\n  }\n\n  if (lengthNumber > 64) {\n    showToast(Toast.Style.Failure, \"Password length must be less than 65\");\n    return;\n  }\n\n  const generatedPassword = generatePassword(lengthNumber, useNumbers, useChars);\n\n  Clipboard.copy(generatedPassword);\n\n  if (hideAfterCopy) {\n    showHUD(`Copied Password - ${generatedPassword} \uD83C\uDF89`, {\n      clearRootSearch: false,\n      popToRootType: PopToRootType.Suspended,\n    });\n  } else {\n    showToast(Toast.Style.Success, \"Copied Password \uD83C\uDF89\", generatedPassword);\n  }\n};\n\nexport default function Command() {\n  const { storePasswordLength } = getPreferenceValues<Preferences>();\n\n  return (\n    <Form\n      navigationTitle=\"Password Generator\"\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Generate Password\" onSubmit={(values: Form) => handleGeneratePassword(values)} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField\n        id=\"length\"\n        title=\"Enter password length (number of characters):\"\n        placeholder=\"Enter a number between 5 and 64\"\n        storeValue={storePasswordLength}\n      />\n      <Form.Checkbox id=\"useNumbers\" label=\"Use numbers?\" defaultValue={true} />\n      <Form.Checkbox id=\"useChars\" label=\"Use special characters?\" defaultValue={true} />\n    </Form>\n  );\n}\n", "import crypto from \"node:crypto\";\n\nexport function generatePassword(len: number, useNumbers: boolean, useChars: boolean): string {\n  let charset = \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\";\n\n  if (useNumbers) {\n    charset += \"23456789\";\n  }\n\n  if (useChars) {\n    charset += \"!@#$*^&%\";\n  }\n\n  let retVal = \"\";\n\n  for (let i = 0; i < len; ++i) {\n    retVal += charset.charAt(crypto.randomInt(charset.length));\n  }\n\n  return retVal;\n}\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAUO,wBCVP,IAAAC,EAAmB,0BAEZ,SAASC,EAAiBC,EAAaC,EAAqBC,EAA2B,CAC5F,IAAIC,EAAU,oDAEVF,IACFE,GAAW,YAGTD,IACFC,GAAW,YAGb,IAAIC,EAAS,GAEb,QAASC,EAAI,EAAGA,EAAIL,EAAK,EAAEK,EACzBD,GAAUD,EAAQ,OAAO,EAAAG,QAAO,UAAUH,EAAQ,MAAM,CAAC,EAG3D,OAAOC,CACT,CD+CI,IAAAG,EAAA,6BA1CEC,EAA0BC,GAAiB,CAC/C,GAAM,CAAE,cAAAC,CAAc,KAAI,uBAAiC,EAErDC,EAASF,EAAO,OAChBG,EAAe,SAASD,EAAQ,EAAE,EAElCE,EAAa,EAAQJ,EAAO,WAC5BK,EAAW,EAAQL,EAAO,SAEhC,GAAI,CAAC,OAAO,SAASG,CAAY,EAAG,IAClC,aAAU,QAAM,MAAM,QAAS,kCAAkC,EACjE,MACF,CAEA,GAAIA,EAAe,EAAG,IACpB,aAAU,QAAM,MAAM,QAAS,wCAAwC,EACvE,MACF,CAEA,GAAIA,EAAe,GAAI,IACrB,aAAU,QAAM,MAAM,QAAS,sCAAsC,EACrE,MACF,CAEA,IAAMG,EAAoBC,EAAiBJ,EAAcC,EAAYC,CAAQ,EAE7E,YAAU,KAAKC,CAAiB,EAE5BL,KACF,WAAQ,qBAAqBK,CAAiB,aAAO,CACnD,gBAAiB,GACjB,cAAe,gBAAc,SAC/B,CAAC,KAED,aAAU,QAAM,MAAM,QAAS,4BAAsBA,CAAiB,CAE1E,EAEe,SAARE,GAA2B,CAChC,GAAM,CAAE,oBAAAC,CAAoB,KAAI,uBAAiC,EAEjE,SACE,QAAC,QACC,gBAAgB,qBAChB,WACE,OAAC,eACC,mBAAC,SAAO,WAAP,CAAkB,MAAM,oBAAoB,SAAWT,GAAiBD,EAAuBC,CAAM,EAAG,EAC3G,EAGF,oBAAC,OAAK,UAAL,CACC,GAAG,SACH,MAAM,gDACN,YAAY,kCACZ,WAAYS,EACd,KACA,OAAC,OAAK,SAAL,CAAc,GAAG,aAAa,MAAM,eAAe,aAAc,GAAM,KACxE,OAAC,OAAK,SAAL,CAAc,GAAG,WAAW,MAAM,0BAA0B,aAAc,GAAM,GACnF,CAEJ",
  "names": ["generate_password_exports", "__export", "Command", "__toCommonJS", "import_api", "import_node_crypto", "generatePassword", "len", "useNumbers", "useChars", "charset", "retVal", "i", "crypto", "import_jsx_runtime", "handleGeneratePassword", "values", "hideAfterCopy", "length", "lengthNumber", "useNumbers", "useChars", "generatedPassword", "generatePassword", "Command", "storePasswordLength"]
}
