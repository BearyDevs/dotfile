#!/usr/bin/env node
import He from"path";import{execa as jt}from"execa";import Ke from"fs-extra";import*as f from"@clack/prompts";import Q from"chalk";import{Command as ut}from"commander";import oe from"path";import{fileURLToPath as tt}from"url";var st=tt(import.meta.url),nt=oe.dirname(st),p=oe.join(nt,"../"),ae=`   ___ ___ ___   __ _____ ___   _____ ____    __   ___ ___
  / __| _ \\ __| /  \\_   _| __| |_   _|__ /   /  \\ | _ \\ _ \\
 | (__|   / _| / /\\ \\| | | _|    | |  |_ \\  / /\\ \\|  _/  _/
  \\___|_|_\\___|_/\u203E\u203E\\_\\_| |___|   |_| |___/ /_/\u203E\u203E\\_\\_| |_|
`,N="my-t3-app",H="create-t3-app";import F from"path";import K from"fs-extra";var re=({projectDir:e,packages:t,databaseProvider:o,projectName:s})=>{let i=t?.nextAuth.inUse,n=t?.prisma.inUse,a=t?.drizzle.inUse,r=n||a,m=o==="planetscale",d=it(!!i,!!n,!!a,o,s),c="";if(r?m?i?c="with-auth-db-planetscale.js":c="with-db-planetscale.js":i?c="with-auth-db.js":c="with-db.js":i&&(c="with-auth.js"),c!==""){let w=F.join(p,"template/extras/src/env",c),P=F.join(e,"src/env.js");K.copyFileSync(w,P)}let y=F.join(e,".env"),g=F.join(e,".env.example");K.writeFileSync(y,d,"utf-8"),K.writeFileSync(g,ot+d,"utf-8")},it=(e,t,o,s,i)=>{let n=`
# When adding additional environment variables, the schema in "/src/env.js"
# should be updated accordingly.
`.trim().concat(`
`);return t&&(n+=`
# Prisma
# https://www.prisma.io/docs/reference/database-reference/connection-urls#env
`),o&&(n+=`
# Drizzle
`),(t||o)&&(s==="planetscale"?o?n+=`# Get the Database URL from the "prisma" dropdown selector in PlanetScale. 
# Change the query params at the end of the URL to "?ssl={"rejectUnauthorized":true}"
DATABASE_URL='mysql://YOUR_MYSQL_URL_HERE?ssl={"rejectUnauthorized":true}'`:n=`# Get the Database URL from the "prisma" dropdown selector in PlanetScale. 
DATABASE_URL='mysql://YOUR_MYSQL_URL_HERE?sslaccept=strict'`:s==="mysql"?n+=`DATABASE_URL="mysql://root:password@localhost:3306/${i}"`:s==="postgres"?n+=`DATABASE_URL="postgresql://postgres:password@localhost:5432/${i}"`:s==="sqlite"&&(n+='DATABASE_URL="file:./db.sqlite"'),n+=`
`),e&&(n+=`
# Next Auth
# You can generate a new secret on the command line with:
# openssl rand -base64 32
# https://next-auth.js.org/configuration/options#secret
# NEXTAUTH_SECRET=""
NEXTAUTH_URL="http://localhost:3000"

# Next Auth Discord Provider
DISCORD_CLIENT_ID=""
DISCORD_CLIENT_SECRET=""
`),!e&&!t&&(n+=`
# Example:
# SERVERVAR="foo"
# NEXT_PUBLIC_CLIENTVAR="bar"
`),n},ot=`
# Since the ".env" file is gitignored, you can use the ".env.example" file to
# build a new ".env" file when you clone the repo. Keep this file up-to-date
# when you add new variables to \`.env\`.

# This file will be committed to version control, so make sure not to have any
# secrets in it. If you are cloning this repo, create a copy of this file named
# ".env" and populate it with your secrets.
`.trim().concat(`

`);import R from"path";import me from"fs-extra";import pe from"path";import ce from"fs-extra";import at from"sort-package-json";var le={"next-auth":"^4.24.6","@auth/prisma-adapter":"^1.4.0","@auth/drizzle-adapter":"^0.7.0",prisma:"^5.10.2","@prisma/client":"^5.10.2","@prisma/adapter-planetscale":"^5.10.2","drizzle-orm":"^0.29.4","drizzle-kit":"^0.20.14","eslint-plugin-drizzle":"^0.2.3",mysql2:"^3.9.1","@planetscale/database":"^1.16.0",postgres:"^3.4.3",pg:"^8.11.3","@libsql/client":"^0.6.0",tailwindcss:"^3.4.1",postcss:"^8.4.34",prettier:"^3.2.5","prettier-plugin-tailwindcss":"^0.5.11","@trpc/client":"next","@trpc/server":"next","@trpc/react-query":"next","@trpc/next":"next","@tanstack/react-query":"^5.25.0",superjson:"^2.2.1","server-only":"^0.0.1"};var h=e=>{let{dependencies:t,devMode:o,projectDir:s}=e,i=ce.readJSONSync(pe.join(s,"package.json"));t.forEach(a=>{let r=le[a];o&&i.devDependencies?i.devDependencies[a]=r:i.dependencies&&(i.dependencies[a]=r)});let n=at(i);ce.writeJSONSync(pe.join(s,"package.json"),n,{spaces:2})};var de=({projectDir:e,packages:t,appRouter:o})=>{let s=t?.prisma.inUse,i=t?.drizzle.inUse,n=["next-auth"];s&&n.push("@auth/prisma-adapter"),i&&n.push("@auth/drizzle-adapter"),h({projectDir:e,dependencies:n,devMode:!1});let a=R.join(p,"template/extras"),d=o?"src/app/api/auth/[...nextauth]/route.ts":"src/pages/api/auth/[...nextauth].ts",c=R.join(a,d),y=R.join(e,d),g=R.join(a,"src/server",o?"auth-app":"auth-pages",s?"with-prisma.ts":i?"with-drizzle.ts":"base.ts"),w=R.join(e,"src/server/auth.ts");me.copySync(c,y),me.copySync(g,w)};import k from"path";import j from"fs-extra";var fe=({projectDir:e,packages:t,databaseProvider:o})=>{h({projectDir:e,dependencies:["prisma"],devMode:!0}),h({projectDir:e,dependencies:["@prisma/client"],devMode:!1}),o==="planetscale"&&h({projectDir:e,dependencies:["@prisma/adapter-planetscale","@planetscale/database"],devMode:!1});let s=k.join(p,"template/extras"),i=k.join(s,"prisma/schema",`${t?.nextAuth.inUse?"with-auth":"base"}${o==="planetscale"?"-planetscale":""}.prisma`),n=j.readFileSync(i,"utf-8");o!=="sqlite"&&(n=n.replace('provider = "sqlite"',`provider = "${{mysql:"mysql",postgres:"postgresql",planetscale:"mysql"}[o]}"`),["mysql","planetscale"].includes(o)&&(n=n.replace("// @db.Text","@db.Text")));let a=k.join(e,"prisma/schema.prisma");j.mkdirSync(k.dirname(a),{recursive:!0}),j.writeFileSync(a,n);let r=k.join(s,o==="planetscale"?"src/server/db/db-prisma-planetscale.ts":"src/server/db/db-prisma.ts"),m=k.join(e,"src/server/db.ts"),d=k.join(e,"package.json"),c=j.readJSONSync(d);c.scripts={...c.scripts,postinstall:"prisma generate","db:push":"prisma db push","db:studio":"prisma studio"},j.copySync(r,m),j.writeJSONSync(d,c,{spaces:2})};import v from"path";import $ from"fs-extra";var ue=({projectDir:e})=>{h({projectDir:e,dependencies:["tailwindcss","postcss","prettier","prettier-plugin-tailwindcss"],devMode:!0});let t=v.join(p,"template/extras"),o=v.join(t,"config/tailwind.config.ts"),s=v.join(e,"tailwind.config.ts"),i=v.join(t,"config/postcss.config.cjs"),n=v.join(e,"postcss.config.cjs"),a=v.join(t,"config/_prettier.config.js"),r=v.join(e,"prettier.config.js"),m=v.join(t,"src/styles/globals.css"),d=v.join(e,"src/styles/globals.css");$.copySync(o,s),$.copySync(i,n),$.copySync(m,d),$.copySync(a,r)};import u from"path";import rt from"fs-extra";var ge=({projectDir:e,packages:t,appRouter:o})=>{h({projectDir:e,dependencies:["@tanstack/react-query","superjson","@trpc/server","@trpc/client","@trpc/react-query"],devMode:!1});let s=t?.nextAuth.inUse,i=t?.prisma.inUse,n=t?.drizzle.inUse,a=i||n,r=u.join(p,"template/extras"),c=o?"src/app/api/trpc/[trpc]/route.ts":"src/pages/api/trpc/[trpc].ts",y=u.join(r,c),g=u.join(e,c),w=s&&a?"with-auth-db.ts":s?"with-auth.ts":a?"with-db.ts":"base.ts",P=u.join(r,"src/server/api",o?"trpc-app":"trpc-pages",w),T=u.join(e,"src/server/api/trpc.ts"),Ye=u.join(r,"src/server/api/root.ts"),Qe=u.join(e,"src/server/api/root.ts"),Xe=s&&i?"with-auth-prisma.ts":s&&n?"with-auth-drizzle.ts":s?"with-auth.ts":i?"with-prisma.ts":n?"with-drizzle.ts":"base.ts",Ze=u.join(r,"src/server/api/routers/post",Xe),et=u.join(e,"src/server/api/routers/post.ts"),W=[[y,g],[P,T],[Ye,Qe],[Ze,et]];if(o){h({dependencies:["server-only"],devMode:!1,projectDir:e});let A=u.join(r,"src/trpc");W.push([u.join(A,"server.ts"),u.join(e,"src/trpc/server.ts")],[u.join(A,"react.tsx"),u.join(e,"src/trpc/react.tsx")],[u.join(r,"src/app/_components",t?.tailwind.inUse?"create-post-tw.tsx":"create-post.tsx"),u.join(e,"src/app/_components/create-post.tsx")])}else{h({dependencies:["@trpc/next"],devMode:!1,projectDir:e});let A=u.join(r,"src/utils/api.ts"),B=u.join(e,"src/utils/api.ts");W.push([A,B])}W.forEach(([A,B])=>{rt.copySync(A,B)})};import Y from"fs";import he from"path";var ye=({projectDir:e,databaseProvider:t,projectName:o})=>{let s=he.join(p,`template/extras/start-database/${t}.sh`),i=Y.readFileSync(s,"utf-8"),n=he.join(e,"start-database.sh");Y.writeFileSync(n,i.replaceAll("project1",o)),Y.chmodSync(n,"755")};import S from"path";import _ from"fs-extra";var we=({projectDir:e,packages:t,scopedAppName:o,databaseProvider:s})=>{let i=["drizzle-kit","eslint-plugin-drizzle"];s==="planetscale"&&i.push("mysql2"),s==="postgres"&&i.push("pg"),h({projectDir:e,dependencies:i,devMode:!0}),h({projectDir:e,dependencies:["drizzle-orm",{planetscale:"@planetscale/database",mysql:"mysql2",postgres:"postgres",sqlite:"@libsql/client"}[s]],devMode:!1});let n=S.join(p,"template/extras"),a=S.join(n,`config/drizzle-config-${s==="planetscale"?"mysql":s}.ts`),r=S.join(e,"drizzle.config.ts"),m=S.join(n,"src/server/db/schema-drizzle",t?.nextAuth.inUse?`with-auth-${s}.ts`:`base-${s}.ts`),d=S.join(e,"src/server/db/schema.ts"),c=_.readFileSync(m,"utf-8");c=c.replace("project1_${name}",`${o}_\${name}`);let y=_.readFileSync(a,"utf-8");y=y.replace("project1_*",`${o}_*`);let g=S.join(n,`src/server/db/index-drizzle/with-${s}.ts`),w=S.join(e,"src/server/db/index.ts"),P=S.join(e,"package.json"),T=_.readJSONSync(P);T.scripts={...T.scripts,"db:push":`drizzle-kit push:${{postgres:"pg",sqlite:"sqlite",mysql:"mysql",planetscale:"mysql"}[s]}`,"db:studio":"drizzle-kit studio"},_.copySync(a,r),_.mkdirSync(S.dirname(d),{recursive:!0}),_.writeFileSync(d,c),_.writeFileSync(r,y),_.copySync(g,w),_.writeJSONSync(P,T,{spaces:2})};import lt from"path";import pt from"fs-extra";var xe={parser:"@typescript-eslint/parser",parserOptions:{project:!0},plugins:["@typescript-eslint"],extends:["next/core-web-vitals","plugin:@typescript-eslint/recommended-type-checked","plugin:@typescript-eslint/stylistic-type-checked"],rules:{"@typescript-eslint/array-type":"off","@typescript-eslint/consistent-type-definitions":"off","@typescript-eslint/consistent-type-imports":["warn",{prefer:"type-imports",fixStyle:"inline-type-imports"}],"@typescript-eslint/no-unused-vars":["warn",{argsIgnorePattern:"^_"}],"@typescript-eslint/require-await":"off","@typescript-eslint/no-misused-promises":["error",{checksVoidReturn:{attributes:!1}}]}};var be=({projectDir:e,packages:t})=>{let o=!!t?.drizzle?.inUse,s=ct({usingDrizzle:o}),i=['/** @type {import("eslint").Linter.Config} */',`const config = ${JSON.stringify(s,null,2)}`,"module.exports = config;"].join(`
`),n=lt.join(e,".eslintrc.cjs");pt.writeFileSync(n,i,"utf-8")},ct=({usingDrizzle:e})=>{let t=xe;return e&&(t.plugins=[...t.plugins??[],"drizzle"],t.rules={...t.rules,"drizzle/enforce-delete-with-where":["error",{drizzleObjectName:["db"]}],"drizzle/enforce-update-with-where":["error",{drizzleObjectName:["db"]}]}),t};var ve=["mysql","postgres","sqlite","planetscale"],Se=(e,t)=>({nextAuth:{inUse:e.includes("nextAuth"),installer:de},prisma:{inUse:e.includes("prisma"),installer:fe},drizzle:{inUse:e.includes("drizzle"),installer:we},tailwind:{inUse:e.includes("tailwind"),installer:ue},trpc:{inUse:e.includes("trpc"),installer:ge},dbContainer:{inUse:["mysql","postgres"].includes(t),installer:ye},envVariables:{inUse:!0,installer:re},eslint:{inUse:!0,installer:be}});import mt from"path";import dt from"fs-extra";var C=()=>{let e=mt.join(p,"package.json");return dt.readJSONSync(e).version??"1.0.0"};var x=()=>{let e=process.env.npm_config_user_agent;return e?e.startsWith("yarn")?"yarn":e.startsWith("pnpm")?"pnpm":e.startsWith("bun")?"bun":"npm":"npm"};var D=class extends Error{constructor(t){super(t)}};import G from"chalk";var l={error(...e){console.log(G.red(...e))},warn(...e){console.log(G.yellow(...e))},info(...e){console.log(G.cyan(...e))},success(...e){console.log(G.green(...e))}};var q=e=>(e.length>1&&e.endsWith("/")&&(e=e.slice(0,-1)),e);var ft=/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/,_e=e=>{let t=q(e),o=t.split("/"),s=o.findIndex(n=>n.startsWith("@")),i=o[o.length-1];if(o.findIndex(n=>n.startsWith("@"))!==-1&&(i=o.slice(s).join("/")),!(t==="."||ft.test(i??"")))return"App name must consist of only lowercase alphanumeric characters, '-', and '_'"};var Pe=e=>{if(e.startsWith(".")||e.startsWith("/"))return"Import alias can't start with '.' or '/'"};var I={appName:N,packages:["nextAuth","prisma","tailwind","trpc"],flags:{noGit:!1,noInstall:!1,default:!1,CI:!1,tailwind:!1,trpc:!1,prisma:!1,drizzle:!1,nextAuth:!1,importAlias:"~/",appRouter:!1},databaseProvider:"sqlite"},ke=async()=>{let e=I,t=new ut().name(H).description("A CLI for creating web applications with the t3 stack").argument("[dir]","The name of the application, as well as the name of the directory to create").option("--noGit","Explicitly tell the CLI to not initialize a new git repo in the project",!1).option("--noInstall","Explicitly tell the CLI to not run the package manager's install command",!1).option("-y, --default","Bypass the CLI and use all default options to bootstrap a new t3-app",!1).option("--CI","Boolean value if we're running in CI",!1).option("--tailwind [boolean]","Experimental: Boolean value if we should install Tailwind CSS. Must be used in conjunction with `--CI`.",s=>!!s&&s!=="false").option("--nextAuth [boolean]","Experimental: Boolean value if we should install NextAuth.js. Must be used in conjunction with `--CI`.",s=>!!s&&s!=="false").option("--prisma [boolean]","Experimental: Boolean value if we should install Prisma. Must be used in conjunction with `--CI`.",s=>!!s&&s!=="false").option("--drizzle [boolean]","Experimental: Boolean value if we should install Drizzle. Must be used in conjunction with `--CI`.",s=>!!s&&s!=="false").option("--trpc [boolean]","Experimental: Boolean value if we should install tRPC. Must be used in conjunction with `--CI`.",s=>!!s&&s!=="false").option("-i, --import-alias","Explicitly tell the CLI to use a custom import alias",I.flags.importAlias).option("--dbProvider [provider]",`Choose a database provider to use. Possible values: ${ve.join(", ")}`,I.flags.importAlias).option("--appRouter [boolean]","Explicitly tell the CLI to use the new Next.js app router",s=>!!s&&s!=="false").version(C(),"-v, --version","Display the version number").addHelpText("afterAll",`
 The t3 stack was inspired by ${Q.hex("#E8DCFF").bold("@t3dotgg")} and has been used to build awesome fullstack applications like ${Q.hex("#E24A8D").underline("https://ping.gg")} 
`).parse(process.argv);process.env.npm_config_user_agent?.startsWith("yarn/3")&&l.warn(`  WARNING: It looks like you are using Yarn 3. This is currently not supported,
  and likely to result in a crash. Please run create-t3-app with another
  package manager such as pnpm, npm, or Yarn Classic.
  See: https://github.com/t3-oss/create-t3-app/issues/57`);let o=t.args[0];if(o&&(e.appName=o),e.flags=t.opts(),e.flags.CI)return e.packages=[],e.flags.trpc&&e.packages.push("trpc"),e.flags.tailwind&&e.packages.push("tailwind"),e.flags.prisma&&e.packages.push("prisma"),e.flags.drizzle&&e.packages.push("drizzle"),e.flags.nextAuth&&e.packages.push("nextAuth"),e.flags.prisma&&e.flags.drizzle&&(l.warn("Incompatible combination Prisma + Drizzle. Exiting."),process.exit(0)),e.databaseProvider=e.packages.includes("drizzle")?"planetscale":"sqlite",e;if(e.flags.default)return e;try{if(process.env.TERM_PROGRAM?.toLowerCase().includes("mintty"))throw l.warn(`  WARNING: It looks like you are using MinTTY, which is non-interactive. This is most likely because you are 
  using Git Bash. If that's that case, please use Git Bash from another terminal, such as Windows Terminal. Alternatively, you 
  can provide the arguments from the CLI directly: https://create.t3.gg/en/installation#experimental-usage to skip the prompts.`),new D("Non-interactive environment");let s=x(),i=await f.group({...!o&&{name:()=>f.text({message:"What will your project be called?",defaultValue:o,validate:_e})},language:()=>f.select({message:"Will you be using TypeScript or JavaScript?",options:[{value:"typescript",label:"TypeScript"},{value:"javascript",label:"JavaScript"}],initialValue:"typescript"}),_:({results:a})=>a.language==="javascript"?f.note(Q.redBright("Wrong answer, using TypeScript instead")):void 0,styling:()=>f.confirm({message:"Will you be using Tailwind CSS for styling?"}),trpc:()=>f.confirm({message:"Would you like to use tRPC?"}),authentication:()=>f.select({message:"What authentication provider would you like to use?",options:[{value:"none",label:"None"},{value:"next-auth",label:"NextAuth.js"}],initialValue:"none"}),database:()=>f.select({message:"What database ORM would you like to use?",options:[{value:"none",label:"None"},{value:"prisma",label:"Prisma"},{value:"drizzle",label:"Drizzle"}],initialValue:"none"}),appRouter:()=>f.confirm({message:"Would you like to use Next.js App Router?",initialValue:!0}),databaseProvider:({results:a})=>{if(a.database!=="none")return f.select({message:"What database provider would you like to use?",options:[{value:"sqlite",label:"SQLite (LibSQL)"},{value:"mysql",label:"MySQL"},{value:"postgres",label:"PostgreSQL"},{value:"planetscale",label:"PlanetScale"}],initialValue:"sqlite"})},...!e.flags.noGit&&{git:()=>f.confirm({message:"Should we initialize a Git repository and stage the changes?",initialValue:!I.flags.noGit})},...!e.flags.noInstall&&{install:()=>f.confirm({message:`Should we run '${s}`+(s==="yarn"?"'?":" install' for you?"),initialValue:!I.flags.noInstall})},importAlias:()=>f.text({message:"What import alias would you like to use?",defaultValue:I.flags.importAlias,placeholder:I.flags.importAlias,validate:Pe})},{onCancel(){process.exit(1)}}),n=[];return i.styling&&n.push("tailwind"),i.trpc&&n.push("trpc"),i.authentication==="next-auth"&&n.push("nextAuth"),i.database==="prisma"&&n.push("prisma"),i.database==="drizzle"&&n.push("drizzle"),{appName:i.name??e.appName,packages:n,databaseProvider:i.databaseProvider||"sqlite",flags:{...e.flags,appRouter:i.appRouter??e.flags.appRouter,noGit:!i.git||e.flags.noGit,noInstall:!i.install||e.flags.noInstall,importAlias:i.importAlias??e.flags.importAlias}}}catch(s){if(s instanceof D)l.warn(`
  ${H} needs an interactive terminal to provide options`),await f.confirm({message:"Continue scaffolding a default T3 app?",initialValue:!0})||(l.info("Exiting..."),process.exit(0)),l.info(`Bootstrapping a default T3 app in ./${e.appName}`);else throw s}return e};import De from"fs";import U from"path";import Ie from"chalk";import gt from"ora";var ze=e=>{let{packages:t}=e;l.info("Adding boilerplate...");for(let[o,s]of Object.entries(t))if(s.inUse){let i=gt(`Boilerplating ${o}...`).start();s.installer(e),i.succeed(Ie.green(`Successfully setup boilerplate for ${Ie.green.bold(o)}`))}l.info("")};import X from"path";import*as L from"@clack/prompts";import z from"chalk";import O from"fs-extra";import ht from"ora";var Ae=async({projectName:e,projectDir:t,pkgManager:o,noInstall:s})=>{let i=X.join(p,"template/base");s?l.info(""):l.info(`
Using: ${z.cyan.bold(o)}
`);let n=ht(`Scaffolding in: ${t}...
`).start();if(O.existsSync(t))if(O.readdirSync(t).length===0)e!=="."&&n.info(`${z.cyan.bold(e)} exists but is empty, continuing...
`);else{n.stopAndPersist();let r=await L.select({message:`${z.redBright.bold("Warning:")} ${z.cyan.bold(e)} already exists and isn't empty. How would you like to proceed?`,options:[{label:"Abort installation (recommended)",value:"abort"},{label:"Clear the directory and continue installation",value:"clear"},{label:"Continue installation and overwrite conflicting files",value:"overwrite"}],initialValue:"abort"});r==="abort"&&(n.fail("Aborting installation..."),process.exit(1)),await L.confirm({message:`Are you sure you want to ${r==="clear"?"clear the directory":"overwrite conflicting files"}?`,initialValue:!1})||(n.fail("Aborting installation..."),process.exit(1)),r==="clear"&&(n.info(`Emptying ${z.cyan.bold(e)} and creating t3 app..
`),O.emptyDirSync(t))}n.start(),O.copySync(i,t),O.renameSync(X.join(t,"_gitignore"),X.join(t,".gitignore"));let a=e==="."?"App":z.cyan.bold(e);n.succeed(`${a} ${z.green("scaffolded successfully!")}
`)};import b from"path";import V from"fs-extra";var je=({projectDir:e,packages:t})=>{let o=b.join(p,"template/extras/src/pages/_app"),s=t.tailwind.inUse,i=t.trpc.inUse,n=t.nextAuth.inUse,a="base.tsx";i&&s&&n?a="with-auth-trpc-tw.tsx":i&&!s&&n?a="with-auth-trpc.tsx":i&&s?a="with-trpc-tw.tsx":i&&!s?a="with-trpc.tsx":!i&&s?a="with-tw.tsx":n&&s?a="with-auth-tw.tsx":n&&!s&&(a="with-auth.tsx");let r=b.join(o,a),m=b.join(e,"src/pages/_app.tsx");V.copySync(r,m)},Ce=({projectDir:e,packages:t})=>{let o=b.join(p,"template/extras/src/app/layout"),s=t.tailwind.inUse,i=t.trpc.inUse,n="base.tsx";i&&s?n="with-trpc-tw.tsx":i&&!s?n="with-trpc.tsx":!i&&s&&(n="with-tw.tsx");let a=b.join(o,n),r=b.join(e,"src/app/layout.tsx");V.copySync(a,r)},Te=({projectDir:e,packages:t})=>{let o=b.join(p,"template/extras/src/pages/index"),s=t.trpc.inUse,i=t.tailwind.inUse,n=t.nextAuth.inUse,a="base.tsx";s&&i&&n?a="with-auth-trpc-tw.tsx":s&&!i&&n?a="with-auth-trpc.tsx":s&&i?a="with-trpc-tw.tsx":s&&!i?a="with-trpc.tsx":!s&&i&&(a="with-tw.tsx");let r=b.join(o,a),m=b.join(e,"src/pages/index.tsx");V.copySync(r,m)},Re=({projectDir:e,packages:t})=>{let o=b.join(p,"template/extras/src/app/page"),s=t.trpc.inUse,i=t.tailwind.inUse,n=t.nextAuth.inUse,a="base.tsx";s&&i&&n?a="with-auth-trpc-tw.tsx":s&&!i&&n?a="with-auth-trpc.tsx":s&&i?a="with-trpc-tw.tsx":s&&!i?a="with-trpc.tsx":!s&&i&&(a="with-tw.tsx");let r=b.join(o,a),m=b.join(e,"src/app/page.tsx");V.copySync(r,m)};var Oe=async({projectName:e,scopedAppName:t,packages:o,noInstall:s,appRouter:i,databaseProvider:n})=>{let a=x(),r=U.resolve(process.cwd(),e);if(await Ae({projectName:e,projectDir:r,pkgManager:a,scopedAppName:t,noInstall:s,appRouter:i,databaseProvider:n}),ze({projectName:e,scopedAppName:t,projectDir:r,pkgManager:a,packages:o,noInstall:s,appRouter:i,databaseProvider:n}),i?(De.copyFileSync(U.join(p,"template/extras/config/next-config-appdir.js"),U.join(r,"next.config.js")),Ce({projectDir:r,packages:o}),Re({projectDir:r,packages:o})):(je({projectDir:r,packages:o}),Te({projectDir:r,packages:o})),!o.tailwind.inUse){let m=U.join(p,"template/extras/src/index.module.css"),d=U.join(r,"src",i?"app":"pages","index.module.css");De.copyFileSync(m,d)}return r};import{execSync as te}from"child_process";import Z from"path";import*as ee from"@clack/prompts";import E from"chalk";import{execa as M}from"execa";import Ue from"fs-extra";import yt from"ora";var wt=e=>{try{return te("git --version",{cwd:e}),!0}catch{return!1}},se=e=>Ue.existsSync(Z.join(e,".git")),ne=async e=>{try{return await M("git",["rev-parse","--is-inside-work-tree"],{cwd:e,stdout:"ignore"}),!0}catch{return!1}},xt=()=>{let t=te("git --version").toString().trim().split(" ")[2],o=t?.split(".")[0],s=t?.split(".")[1];return{major:Number(o),minor:Number(s)}},bt=()=>te("git config --global init.defaultBranch || echo main").toString().trim(),Ee=async e=>{if(l.info("Initializing Git..."),!wt(e)){l.warn("Git is not installed. Skipping Git initialization.");return}let t=yt(`Creating a new git repo...
`).start(),o=se(e),s=await ne(e),i=Z.parse(e).name;if(s&&o){if(t.stop(),!await ee.confirm({message:`${E.redBright.bold("Warning:")} Git is already initialized in "${i}". Initializing a new git repository would delete the previous history. Would you like to continue anyways?`,initialValue:!1})){t.info("Skipping Git initialization.");return}Ue.removeSync(Z.join(e,".git"))}else if(s&&!o&&(t.stop(),!await ee.confirm({message:`${E.redBright.bold("Warning:")} "${i}" is already in a git worktree. Would you still like to initialize a new git repository in this directory?`,initialValue:!1}))){t.info("Skipping Git initialization.");return}try{let n=bt(),{major:a,minor:r}=xt();a<2||a==2&&r<28?(await M("git",["init"],{cwd:e}),await M("git",["symbolic-ref","HEAD",`refs/heads/${n}`],{cwd:e})):await M("git",["init",`--initial-branch=${n}`],{cwd:e}),await M("git",["add","."],{cwd:e}),t.succeed(`${E.green("Successfully initialized and staged")} ${E.green.bold("git")}
`)}catch{t.fail(`${E.bold.red("Failed:")} could not initialize git. Update git to the latest version!
`)}};var Me=async({projectName:e=N,packages:t,appRouter:o,noInstall:s,projectDir:i,databaseProvider:n})=>{let a=x();l.info("Next steps:"),e!=="."&&l.info(`  cd ${e}`),s&&(a==="yarn"?l.info(`  ${a}`):l.info(`  ${a} install`)),["postgres","mysql"].includes(n)&&l.info("  Start up a database, if needed using './start-database.sh'"),(t?.prisma.inUse||t?.drizzle.inUse)&&(["npm","bun"].includes(a)?l.info(`  ${a} run db:push`):l.info(`  ${a} db:push`)),["npm","bun"].includes(a)?l.info(`  ${a} run dev`):l.info(`  ${a} dev`),!await ne(i)&&!se(i)&&l.info("  git init"),l.info('  git commit -m "initial commit"'),o&&l.warn(`
Thank you for trying out the App Router option. If you encounter any issues, please open an issue!`),t?.drizzle.inUse&&l.warn(`
Thank you for trying out the new Drizzle option. If you encounter any issues, please open an issue!`),n==="planetscale"&&l.warn(`
Note: We use the PlanetScale driver so that you can query your data in edge runtimes. If you want to use a different driver, you'll need to change it yourself.`)};import J from"fs";import vt from"path";function Ne(e,t,o){J.readdirSync(e).forEach(i=>{let n=vt.join(e,i);if(J.statSync(n).isDirectory())Ne(n,t,o);else{let r=J.readFileSync(n,"utf8").replace(new RegExp(t,"g"),o);J.writeFileSync(n,r,"utf8")}})}var Fe=(e,t)=>{let o=t.replace(/\*/g,"").replace(/[^\/]$/,"$&/");Ne(e,"~/",o)};import $e from"path";var Ge=e=>{let o=q(e).split("/"),s=o[o.length-1];if(s==="."){let a=$e.resolve(process.cwd());s=$e.basename(a)}let i=o.findIndex(a=>a.startsWith("@"));o.findIndex(a=>a.startsWith("@"))!==-1&&(s=o.slice(i).join("/"));let n=o.filter(a=>!a.startsWith("@")).join("/");return[s,n]};import St from"gradient-string";var _t={blue:"#add7ff",cyan:"#89ddff",green:"#5de4c7",magenta:"#fae4fc",red:"#d0679d",yellow:"#fffac2"},qe=()=>{let e=St(Object.values(_t)),t=x();(t==="yarn"||t==="pnpm")&&console.log(""),console.log(e.multiline(ae))};import Pt from"chalk";import{execa as Le}from"execa";import Ve from"ora";var ie=async(e,t,o)=>{let{onDataHandle:s,args:i=["install"],stdout:n="pipe"}=o,a=Ve(`Running ${t} install...`).start(),r=Le(t,i,{cwd:e,stdout:n});return await new Promise((m,d)=>{s&&r.stdout?.on("data",s(a)),r.on("error",c=>d(c)),r.on("close",()=>m())}),a},kt=async(e,t)=>{switch(e){case"npm":return await Le(e,["install"],{cwd:t,stderr:"inherit"}),null;case"pnpm":return ie(t,e,{onDataHandle:o=>s=>{let i=s.toString();i.includes("Progress")&&(o.text=i.includes("|")?i.split(" | ")[1]??"":i)}});case"yarn":return ie(t,e,{onDataHandle:o=>s=>{o.text=s.toString()}});case"bun":return ie(t,e,{stdout:"ignore"})}},Je=async({projectDir:e})=>{l.info("Installing dependencies...");let t=x();(await kt(t,e)??Ve()).succeed(Pt.green(`Successfully installed dependencies!
`))};import{execSync as It}from"child_process";import zt from"https";var We=e=>{let t=C();t.includes("beta")?(l.warn("  You are using a beta version of create-t3-app."),l.warn("  Please report any bugs you encounter.")):t.includes("next")?(l.warn("  You are running create-t3-app with the @next tag which is no longer maintained."),l.warn("  Please run the CLI with @latest instead.")):t!==e&&(l.warn("  You are using an outdated version of create-t3-app."),l.warn("  Your version:",t+".","Latest version in the npm registry:",e),l.warn("  Please run the CLI with @latest to get the latest updates.")),console.log("")};function At(){return new Promise((e,t)=>{zt.get("https://registry.npmjs.org/-/package/create-t3-app/dist-tags",o=>{if(o.statusCode===200){let s="";o.on("data",i=>s+=i),o.on("end",()=>{e(JSON.parse(s).latest)})}else t()}).on("error",()=>{t()})})}var Be=()=>At().catch(()=>{try{return It("npm view create-t3-app version").toString().trim()}catch{return null}});var Ct=async()=>{let e=await Be(),t=x();qe(),e&&We(e);let{appName:o,packages:s,flags:{noGit:i,noInstall:n,importAlias:a,appRouter:r},databaseProvider:m}=await ke(),d=Se(s,m),[c,y]=Ge(o),g=await Oe({projectName:y,scopedAppName:c,packages:d,databaseProvider:m,importAlias:a,noInstall:n,appRouter:r}),w=Ke.readJSONSync(He.join(g,"package.json"));if(w.name=c,w.ct3aMetadata={initVersion:C()},t!=="bun"){let{stdout:P}=await jt(t,["-v"],{cwd:g});w.packageManager=`${t}@${P.trim()}`}Ke.writeJSONSync(He.join(g,"package.json"),w,{spaces:2}),a!=="~/"&&Fe(g,a),n||await Je({projectDir:g}),i||await Ee(g),await Me({projectName:y,packages:d,appRouter:r,noInstall:n,projectDir:g,databaseProvider:m}),process.exit(0)};Ct().catch(e=>{l.error("Aborting installation..."),e instanceof Error?l.error(e):(l.error("An unknown error has occurred. Please open an issue on github with the below:"),console.log(e)),process.exit(1)});
